# Global values for kubeadapt.
global:
  name: "kubeadapt"
  nameOverride: ""
  fullnameOverride: ""

agent:
  enabled: true
  image:
    repository: public.ecr.aws/e2b7n1b6/kubeadapt/agent
    tag: "3302e5a" # Defaults to .Chart.AppVersion
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  rbac:
    create: true
  service:
    type: ClusterIP
    port: 8080
    protocol: TCP
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  # Agent specific configuration
  config:
    # Token for authenticating with cloud backend
    token: ""
    # CoreAPI service endpoint
    coreApiUrl: "http://kubeadapt-coreapi.kubeadapt.svc:8080"
    # WebSocket API endpoint for agent connection
    apiEndpoint: "wss://app.kubeadapt.io/api/v1/ws/agent"
    logLevel: "debug"
  env: []
    # Additional environment variables for the agent
    # - name: CUSTOM_ENV
    #   value: "custom_value"

coreapi:
  enabled: true
  image:
    repository: public.ecr.aws/e2b7n1b6/kubeadapt/kubeadapt-core
    tag: "2e0d449" # Defaults to .Chart.AppVersion
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  service:
    type: ClusterIP
    port: 8080
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 300m
      memory: 512Mi
  # CoreAPI specific configuration
  config:
    logLevel: "info"
    # Core API specific configuration
    host: "0.0.0.0"
    port: 8080
    prometheusUrl: "http://kubeadapt-prometheus-server.kubeadapt.svc:80"
    ignoredNamespaces:
      - "kube-system"
      - "kube-public"
      - "kube-node-lease"
      - "opencost"
      - "kubeadapt"
      - "karpenter"
      - "amazon-cloudwatch"
      - "keda"
      - "monitoring"
      - "istio-system"
      - "knative-serving"
      - "knative-eventing"
      - "knative-serving-ingress"
      - "knative-serving-internal"
      - "knative-serving-external"
  env: []
    # Additional environment variables
    # - name: CUSTOM_ENV
    #   value: "custom_value"

# Dependencies configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      size: 50Gi # for 1 years and an eks cluster with 10-150 nodes
      storageClass: gp2
    service:
      type: ClusterIP
      servicePort: 80
    fullnameOverride: kubeadapt-prometheus-server
    retention: "360d"
  alertmanager:
    enabled: false
  # -- Node Exporter Configuration:
  # If you already have node-exporter running in your cluster (e.g., from kube-prometheus-stack),
  # keep prometheus-node-exporter.enabled as false. Because we can read node exporter metrics from existing up and running prometheus node exporters.
  # If you don't have any existing node-exporter, set prometheus-node-exporter.enabled to true.
  prometheus-node-exporter:
    enabled: true
  # -- Kube State Metrics Configuration
  kube-state-metrics:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
  serverFiles:
    prometheus.yml:
      scrape_configs:
        # Prometheus's own metrics
        - job_name: prometheus
          static_configs:
            - targets:
                - localhost:9090
          metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: ^(prometheus_.*|up|time)$

        # Kube State Metrics
        - job_name: kube-state-metrics
          honor_labels: true
          kubernetes_sd_configs:
            - role: service
              namespaces:
                names:
                  - kubeadapt
          relabel_configs:
            - source_labels:
                [__meta_kubernetes_service_label_app_kubernetes_io_name]
              regex: kube-state-metrics
              action: keep
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
          metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: ^(kube_pod_info|kube_deployment_created|kube_namespace_labels|kube_node_info|kube_persistentvolume_info|kube_pod_container_info|kube_node_status_capacity_cpu_cores|kube_node_status_capacity_memory_bytes|kube_node_labels|kube_pod_container_resource_requests|kube_pod_owner|kube_pod_container_status_running|kube_replicaset_owner|kube_pod_container_resource_limits|kube_pod_container_status_waiting|kube_pod_container_status_terminated|kube_pod_container_status_restarts_total|kube_pod_status_phase|kube_deployment_status_replicas|kube_deployment_spec_replicas|kube_horizontalpodautoscaler_info|kube_pod_spec_volumes_persistentvolumeclaims_info)$

        # Metrics from cAdvisor (Container and Network metrics)
        - job_name: "kubernetes-nodes-cadvisor"
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: ^(container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|machine_cpu_cores)$

        # Metrics from OpenCost
        - job_name: "opencost"
          honor_labels: true
          static_configs:
            - targets: ["kubeadapt-opencost.kubeadapt.svc:9003"]
          metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: ^(kubecost_cluster_info|node_cpu_hourly_cost|node_ram_hourly_cost|node_gpu_hourly_cost|pv_hourly_cost|kube_node_labels|kubecost_cluster_management_cost|kube_persistentvolumeclaim_info|kubecost_node_is_spot|kube_persistentvolumeclaim_resource_requests_storage_bytes)$

  # adds additional scrape configs to prometheus.yml
  # must be a string so you have to add a | after extraScrapeConfigs:
  # example adds existing node-exporter scrape config, don't forget to adjust the namespace that you deployed the node-exporter to
  extraScrapeConfigs: ""
  # extraScrapeConfigs: |
  #   - job_name: "node-exporter"
  #     kubernetes_sd_configs:
  #       - role: endpoints
  #         namespaces:
  #           names:
  #             - monitoring
  #     relabel_configs:
  #       - source_labels:
  #           [__meta_kubernetes_service_label_app_kubernetes_io_name]
  #         regex: prometheus-node-exporter
  #         action: keep
  #       - source_labels: [__meta_kubernetes_endpoint_port_name]
  #         regex: http-metrics
  #         action: keep
  #     metric_relabel_configs:
  #       - source_labels: [__name__]
  #         action: keep
  #         regex: ^(node_cpu_seconds_total|node_memory_MemTotal_bytes|node_memory_MemAvailable_bytes|node_filesystem_size_bytes|node_filesystem_avail_bytes)$

opencost:
  restartJob:
    enabled: true
  enabled: true
  opencost:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9003"
      prometheus.io/path: "/metrics"
    prometheus:
      internal:
        enabled: true
        serviceName: kubeadapt-prometheus-server
        namespaceName: kubeadapt
        port: 80
      external:
        enabled: false
        url: ""
    exporter:
      defaultClusterId: default # This can be overridden by the user by setting the opencost.opencost.clusterId value
      resources:
        # These are the default values for the opencost exporter at 1.43.2
        requests:
          cpu: "10m"
          memory: "55Mi"
        limits:
          cpu: "999m"
          memory: "1Gi"
    ui:
      enabled: true
      resources:
        requests:
          cpu: "10m"
          memory: "55Mi"
        limits:
          cpu: "999m"
          memory: "1Gi"
    cloudCost:
      enabled: true
      refreshRateHours: 6
      runWindowDays: 3
    dataRetention:
      dailyResolutionDays: 15
    carbonCost:
      # -- Enable carbon cost exposed in the API
      enabled: false

  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automountServiceAccountToken: true

  rbac:
    enabled: true
